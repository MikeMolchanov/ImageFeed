//
//  ImageFeedUITests.swift
//  ImageFeedUITests
//
//  Created by –ú–∏—Ö–∞–∏–ª on 08.08.2025.
//

import XCTest

final class ImageFeedUITests: XCTestCase {
    
    private let app = XCUIApplication()
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app.launchArguments.append("--uitesting") // üëà –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.launch()
    }

    
    func testAuth() throws {
        // –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        app.buttons["Authenticate"].tap()
        
        // –ù–∞–π—Ç–∏ WebView
        let webView = app.webViews["UnsplashWebView"]
        XCTAssertTrue(webView.waitForExistence(timeout: 5), "WebView –Ω–µ –ø–æ—è–≤–∏–ª—Å—è")
        
        // –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        let loginTextField = webView.descendants(matching: .textField).element
        XCTAssertTrue(loginTextField.waitForExistence(timeout: 5), "–ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        loginTextField.tap()
        loginTextField.typeText("misha995@yandex.ru")
        
        webView.swipeUp()
        
        // –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        let passwordTextField = webView.descendants(matching: .secureTextField).element
        XCTAssertTrue(passwordTextField.waitForExistence(timeout: 5), "–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        passwordTextField.tap()
        passwordTextField.typeText("Mazasplash228")
        
        webView.swipeUp()
        
        // –ù–∞–∂–∞—Ç—å "Login"
        webView.buttons["Login"].tap()
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ –≤ –ª–µ–Ω—Ç–µ
        let tablesQuery = app.tables
        let cell = tablesQuery.children(matching: .cell).element(boundBy: 0)
        XCTAssertTrue(cell.waitForExistence(timeout: 10), "–õ–µ–Ω—Ç–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å")
    }
    
    func testFeed() throws {
        // –ñ–¥—ë–º, –ø–æ–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ª–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        sleep(3) // –∏–ª–∏ –¥–æ–ª—å—à–µ, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–∞—è

        let firstCell = app.cells["feed cell"].firstMatch

        // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏
        XCTAssertTrue(firstCell.waitForExistence(timeout: 30), "–ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –ª–µ–Ω—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å")


        // –õ–∞–π–∫
        let likeButton = firstCell.buttons["like button"]
        XCTAssertTrue(likeButton.exists, "–ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ")
        likeButton.tap()

        // –°–∫—Ä–æ–ª–ª
        app.swipeUp()
        sleep(1)
        app.swipeDown()
    }


    
    func testProfile() throws {
        // –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω –ª–µ–Ω—Ç—ã (feed)
        sleep(3)
        
        // –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è (tab —Å –∏–Ω–¥–µ–∫—Å–æ–º 1, –µ—Å–ª–∏ –æ–Ω –≤—Ç–æ—Ä–æ–π)
        app.tabBars.buttons.element(boundBy: 1).tap()
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        XCTAssertTrue(app.staticTexts["–ú–∏—Ö–∞–∏–ª"].exists)       // –∏–º—è
        XCTAssertTrue(app.staticTexts["@mikemolchanov"].exists) // –ª–æ–≥–∏–Ω (
        
        // –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        app.buttons["logout button"].tap()
        
        // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥ –≤ –∞–ª–µ—Ä—Ç–µ
        app.alerts["–ü–æ–∫–∞, –ø–æ–∫–∞!"].scrollViews.otherElements.buttons["–î–∞"].tap()
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        XCTAssertTrue(app.buttons["Authenticate"].exists)
    }
}
